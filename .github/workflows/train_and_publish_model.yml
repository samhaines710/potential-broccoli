name: Train & Publish HCBC Model (Polygon required, CI env, robust data discovery)

on:
  workflow_dispatch:
    inputs:
      n_trials:
        description: 'Optuna trials'
        required: false
        default: '40'
      folds:
        description: 'Walk-forward folds'
        required: false
        default: '6'
      embargo_rows:
        description: 'Embargo rows between train/val'
        required: false
        default: '200'
      horizon_h:
        description: 'H value (lookahead horizon used for HCBC)'
        required: false
        default: '2'
      drop_neutral:
        description: 'Drop NEUTRAL rows from labels (true/false)'
        required: false
        default: 'true'

permissions:
  contents: write
  id-token: write

env:
  PYTHONUNBUFFERED: "1"

  ARTIFACT_DIR: artifacts
  HCBC_OUT: artifacts/multiH_binary.csv
  MODEL_BUNDLE: artifacts/xgb_hcbc.bundle.joblib

  AWS_REGION: ${{ secrets.AWS_REGION }}
  ML_MODEL_PATH: ${{ secrets.ML_MODEL_PATH }}
  POLYGON_API_KEY: ${{ secrets.POLYGON_API_KEY }}

jobs:
  train-and-publish:
    runs-on: ubuntu-latest
    environment: CI
    timeout-minutes: 720

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}

      - name: Install dependencies
        run: |
          set -euo pipefail
          python -m pip install --upgrade pip
          pip install --no-cache-dir -r "Grond-main 2/requirements.txt"
          pip install "xgboost>=1.7,<2.0" "scikit-learn>=1.3,<1.6" "optuna>=3.5" \
                      "fastapi" "pydantic" "uvicorn[standard]" "pandas" "numpy" \
                      "pyarrow" "fastparquet"

      - name: Assert POLYGON_API_KEY is present
        run: |
          set -euo pipefail
          if [ -z "${POLYGON_API_KEY:-}" ]; then
            echo "::error::POLYGON_API_KEY is not set in the CI environment."
            exit 1
          fi
          echo "POLYGON_API_KEY detected (hidden)."

      - name: Prepare directories
        run: |
          set -euo pipefail
          mkdir -p "Grond-main 2/data" "Grond-main 2/Resources" "${ARTIFACT_DIR}"

      # ===================== 1) PREP (logs captured) =====================
      - name: Run prepare_training_data.py (Polygon)
        env:
          POLYGON_API_KEY: ${{ env.POLYGON_API_KEY }}
        run: |
          set -euo pipefail
          export POLYGON_API_KEY
          python "Grond-main 2/prepare_training_data.py" 2>&1 | tee "${ARTIFACT_DIR}/prep.log"
          test ${PIPESTATUS[0]} -eq 0

      # If script wrote to ./data/, relocate it to Grond-main 2/data/ so discovery is deterministic.
      - name: Relocate prepared dataset if needed
        run: |
          set -euo pipefail
          if [ -f "data/movement_training_data.csv" ]; then
            echo "Found ./data/movement_training_data.csv → moving into Grond-main 2/data/"
            mkdir -p "Grond-main 2/data"
            mv -f "data/movement_training_data.csv" "Grond-main 2/data/"
          else
            echo "No ./data/movement_training_data.csv to relocate (ok if prep wrote elsewhere)."
          fi

      # ===================== 2) DISCOVER & NORMALIZE =====================
      - name: Discover dataset (data/ + Grond-main 2/data) and normalize to CSV
        run: |
          set -euo pipefail
          python - << 'PY'
          import os, glob, sys, hashlib
          import pandas as pd

          roots = ["Grond-main 2/data", "data"]
          patterns = ["*.csv", "*.parquet", "*.feather"]

          candidates = []
          for root in roots:
            if not os.path.isdir(root):
              continue
            for pat in patterns:
              candidates.extend(glob.glob(os.path.join(root, pat)))

          if not candidates:
            print("::error::No dataset files found under 'Grond-main 2/data' or './data'.", file=sys.stderr)
            sys.exit(1)

          newest = max(candidates, key=lambda p: os.path.getmtime(p))
          _, ext = os.path.splitext(newest)
          ext = ext.lower()

          out_csv = os.path.join("artifacts", "prepared_dataset.csv")
          os.makedirs("artifacts", exist_ok=True)

          try:
            if ext == ".csv":
              df_head = pd.read_csv(newest, nrows=1)
              if df_head.empty:
                print(f"::error::CSV appears to contain only a header (no rows): {newest}", file=sys.stderr)
                sys.exit(1)
              import shutil; shutil.copy2(newest, out_csv)
            elif ext == ".parquet":
              df = pd.read_parquet(newest)
              if df.empty:
                print(f"::error::Parquet file is empty: {newest}", file=sys.stderr); sys.exit(1)
              df.to_csv(out_csv, index=False)
            elif ext == ".feather":
              df = pd.read_feather(newest)
              if df.empty:
                print(f"::error::Feather file is empty: {newest}", file=sys.stderr); sys.exit(1)
              df.to_csv(out_csv, index=False)
            else:
              print(f"::error::Unsupported extension {ext} for {newest}", file=sys.stderr); sys.exit(1)
          except Exception as e:
            print(f"::error::Failed to normalize dataset {newest} to CSV: {e}", file=sys.stderr)
            sys.exit(1)

          # manifest + hand-off
          with open(out_csv, "rb") as fh:
            sha = hashlib.sha256(fh.read()).hexdigest()[:20]
          df = pd.read_csv(out_csv, nrows=200)
          print(f"MANIFEST src={newest} rows≈{sum(1 for _ in open(out_csv))-1} cols={len(df.columns)} sha256={sha}")
          print("Columns:", df.columns.tolist())
          print(df.head(5).to_string())

          with open(os.environ["GITHUB_ENV"], "a") as f:
            f.write(f"RAW_PREP_OUT={out_csv}\n")
          PY

      # ===================== 3) ENSURE HCBC SCHEMA (INLINE) ==============
      - name: Ensure HCBC schema (adds H + label_up inline)
        run: |
          set -euo pipefail
          SRC="${RAW_PREP_OUT:-artifacts/prepared_dataset.csv}"
          H="${{ github.event.inputs.horizon_h }}"
          DROP_NEUTRAL="${{ github.event.inputs.drop_neutral }}"

          if [ ! -s "${SRC}" ]; then
            echo "::error::Normalized CSV missing: ${SRC}"
            exit 1
          fi

          python - << 'PY'
          import os, sys, pandas as pd
          src = os.environ.get("SRC")
          out = os.environ.get("HCBC_OUT")
          H = int(os.environ.get("H","2"))
          drop_neutral = os.environ.get("DROP_NEUTRAL","true").lower() == "true"

          df = pd.read_csv(src)
          cols_lower = {c.lower() for c in df.columns}

          # If already has both, just ensure types and write out
          if {"h","label_up"} <= cols_lower:
              # Normalize column names case-wise
              rename = {c:c.lower() for c in df.columns}
              df.rename(columns=rename, inplace=True)
              if drop_neutral and "movement_type" in df.columns:
                  df = df[df["movement_type"].str.upper() != "NEUTRAL"]
              df.to_csv(out, index=False)
              print(f"HCBC: passthrough existing schema → {out} rows={len(df)} cols={len(df.columns)}")
              sys.exit(0)

          # Build label_up from movement_type
          if "movement_type" not in df.columns:
              print("::error::No 'movement_type' column to derive label_up from.", file=sys.stderr)
              sys.exit(2)

          mt = df["movement_type"].astype(str).str.upper()
          label_up = (mt == "CALL").astype(int)
          if drop_neutral:
              mask = mt.isin(["CALL","PUT"])
              df = df.loc[mask].copy()
              label_up = label_up.loc[mask]

          df["label_up"] = label_up
          df["H"] = H

          df.to_csv(out, index=False)
          print(f"HCBC: created label_up (CALL=1, PUT=0, drop_neutral={drop_neutral}) and H={H} → {out} rows={len(df)} cols={len(df.columns)}")
          PY
        env:
          SRC: ${{ env.RAW_PREP_OUT }}
          HCBC_OUT: ${{ env.HCBC_OUT }}

      - name: Show HCBC head (sanity)
        run: |
          set -euo pipefail
          python - << 'PY'
          import pandas as pd
          df=pd.read_csv("artifacts/multiH_binary.csv", nrows=200)
          print("HCBC columns:", df.columns.tolist())
          print(df.head(5).to_string())
          PY

      # ===================== 4) TRAIN (logs captured) ====================
      - name: Train HCBC (XGBoost + Optuna)
        run: |
          set -euo pipefail
          python "audit_fixes/train_hcbc_xgb_optuna.py" \
            --data "${HCBC_OUT}" \
            --out "${MODEL_BUNDLE}" \
            --n-trials "${{ github.event.inputs.n_trials || 40 }}" \
            --folds "${{ github.event.inputs.folds || 6 }}" \
            --embargo-rows "${{ github.event.inputs.embargo_rows || 200 }}" \
            --seed 42 2>&1 | tee "${ARTIFACT_DIR}/train.log"
          test ${PIPESTATUS[0]} -eq 0
          test -s "${MODEL_BUNDLE}"

      # ===================== 5) UPLOAD ARTIFACTS ========================
      - name: Upload artifacts (bundle + reports + logs)
        uses: actions/upload-artifact@v4
        with:
          name: hcbc_model_bundle_and_logs
          path: |
            artifacts/xgb_hcbc.bundle.joblib
            artifacts/hcbc_cv_report.json
            artifacts/hcbc_thresholds.json
            artifacts/hcbc_features.json
            artifacts/prep.log
            artifacts/train.log
            artifacts/prepared_dataset.csv
            artifacts/multiH_binary.csv
          retention-days: 30

      # ===================== 6) AWS: OIDC + S3 publish ==================
      - name: Configure AWS (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::719070647059:role/tigermoon
          aws-region: ${{ env.AWS_REGION || 'us-east-1' }}

      - name: Upload model bundle to S3 (ML_MODEL_PATH)
        if: ${{ env.ML_MODEL_PATH }}
        run: |
          set -euo pipefail
          echo "Uploading model to ${ML_MODEL_PATH}"
          aws s3 cp "${MODEL_BUNDLE}" "${ML_MODEL_PATH}" --only-show-errors

      - name: Upload logs to S3 (co-located with model)
        if: ${{ env.ML_MODEL_PATH }}
        run: |
          set -euo pipefail
          TS=$(date -u +"%Y%m%dT%H%M%SZ")
          BUCKET="$(echo "${ML_MODEL_PATH}" | sed 's@^s3://@@' | cut -d/ -f1)"
          KEY="$(echo "${ML_MODEL_PATH}" | sed 's@^s3://@@' | cut -d/ -f2-)"
          BASE_DIR="$(dirname "${KEY}")"
          PREFIX="s3://${BUCKET}/${BASE_DIR}/logs/${TS}"
          echo "Uploading logs to ${PREFIX}"
          aws s3 cp "artifacts/prep.log"  "${PREFIX}/prep.log"  --only-show-errors || true
          aws s3 cp "artifacts/train.log" "${PREFIX}/train.log" --only-show-errors || true
          if [ -f "artifacts/prepared_dataset.csv" ]; then
            aws s3 cp "artifacts/prepared_dataset.csv" "${PREFIX}/prepared_dataset_snapshot.csv" --only-show-errors || true
          fi
